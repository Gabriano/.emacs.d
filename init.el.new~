;; Load paths
(defvar *emacs-dir* (file-name-as-directory "~/.emacs.d"))

(add-to-list 'load-path *emacs-dir*)
;;(let ((paths '("themes"
;;               "org-6.34c"
;;               "scala"
;;               "tuareg-mode"
;;               "php-mode"
;;               "go-mode"
;;               "color-theme"
;;               "elpa")))
;;  (dolist (path paths)
;;    (add-to-list 'load-path (concat *emacs-dir* path))))


(defvar *todo-file* "~/.emacs.d/todo.org")



(defun buffer-exists (bufname)
  (some #'(lambda (b) (string-equal (buffer-name b) bufname))
        (buffer-list)))


;; Emacs server
(server-start)


;; Load ELPA
(require 'package)
(package-initialize)

(require 'color-theme)
(color-theme-initialize)
(require 'color-theme-tangotango)
(color-theme-tangotango)

;; Disable some GUI features
(when (featurep 'tool-bar) (tool-bar-mode -1))
(when (featurep 'tooltip) (tooltip-mode -1))
;; (when (featurep 'menu-bar) (menu-bar-mode -1))
(blink-cursor-mode -1)

;; Enable mouse wheel
(mouse-wheel-mode 1)

(require 'cl)

;; UTF-8
;(set-terminal-coding-system 'utf-8)
;(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Syntax highlighting
(global-font-lock-mode 1)

;; General settings
(setq user-full-name "Vincent Foley"
      user-mail-address "vfoley@gmail.com"
      inhibit-startup-message t
      initial-scratch-message nil
      default-major-mode 'fundamental-mode
      truncate-partial-width-windows t
      next-line-add-newlines nil
      scroll-step 1
      scroll-conservatively 1
      font-lock-maximum-decoration t
      require-final-newline t
      truncate-partial-width-windows nil
      shift-select-mode nil
      echo-keystrokes 0.1
      x-select-enable-clipboard t
      custom-unlispify-tag-names nil
      ring-bell-function '(lambda ()))

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(windmove-default-keybindings)

;; Ido mode
(require 'tramp)
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq confirm-nonexistent-file-or-buffer nil
      ido-create-new-buffer 'always
      ido-enable-prefix nil
      ido-enable-flex-matching nil)


;; Uniquify
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)


;; Breadcrumb
(require 'breadcrumb)
(setq bc-bookmark-file nil)
(global-set-key [(control f2)]          'bc-set)
(global-set-key [(f2)]                  'bc-previous)
(global-set-key [(shift f2)]            'bc-next)
(global-set-key [(meta f2)]             'bc-list)


;; Hippie expand
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name)
      hippie-expand-dabbrev-as-symbol t)

;; Hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Transient mark mode
(transient-mark-mode 1)
(delete-selection-mode 1)

(setenv "EDITOR" "emacsclient")
(require 'magit)

;; Indentation is 4 spaces.
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)


;; Display line, column and time (24h format)
(line-number-mode t)
(column-number-mode t)
(display-time)
(setq display-time-24hr-format t)

;; Kill ring browser, bind it to M-y
(require 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

;; Always answer 'y' or 'n'
(fset 'yes-or-no-p 'y-or-n-p)

;; Show paren matches
(show-paren-mode t)

;; iswitch-mode
;; (iswitchb-mode t)
;; (setq iswitchb-max-to-show 10
;;       iswitchb-delim " | "
;;       iswitchb-prompt-newbuffer nil
;;       iswitchb-case t)

;; Open compressed files transparently
(auto-compression-mode t)

;; Save backup files in ~/tmp/
(add-to-list 'backup-directory-alist '(".*" . "~/tmp"))

;; Get rid of recovery files (#file#)
(add-hook 'kill-emacs-hook
          '(lambda ()
             (mapcar (lambda (buf)
                       (with-current-buffer buf
                         (delete-auto-save-file-if-necessary t)))
                     (buffer-list))))



;; text-mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)


;; Python
(add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(autoload 'python-mode "python-mode" "Python mode" t)


;; Haskell
(load "~/.emacs.d/haskell-mode-2.6.1/haskell-site-file.el")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)


;; C
(setq c-default-style "k&r")
(setq-default c-basic-offset 4)
(add-hook 'c-mode-hook
          '(lambda ()
             (subword-mode)))


;; Perl
(require 'cperl-mode)
(defalias 'perl-mode 'cperl-mode)
(add-to-list 'auto-mode-alist '("\\.p[lm]$" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.t$" . cperl-mode))
(setq cperl-close-paren-offset -4
      cperl-continued-statement-offset 4
      cperl-indent-level 4
      cperl-indent-parens-as-block t
      cperl-tab-always-indent t
      cperl-label-offset 0)



;; Scala
(require 'scala-mode-auto)
(require 'scala-mode)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(defun scala-newline-and-indent ()
  (interactive)
  (scala-newline)
  (scala-indent-line))
(define-key scala-mode-map (kbd "RET") 'scala-newline-and-indent)


;; OCaml
(require 'tuareg)
(add-to-list 'auto-mode-alist '("\\.mli?$" . tuareg-mode))


;; PHP
(require 'php-mode)
(add-to-list 'auto-mode-alist '("\\.php[345]?$" . php-mode))

;; Twitter
(require 'twit)

;; org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(setq org-log-done t)
(setq org-startup-indented t)
(setq org-startup-folded nil)
(setq org-agenda-files (list "~/.emacs.d/todo.org"))


;; Scheme
(setq scheme-program-name "gsi")

;; Django
(require 'django-html-mode)


;; Go
(require 'go-mode)
(add-to-list 'auto-mode-alist '("\\.go$" . go-mode))


;; Lua
(require 'lua-mode)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))


;; My custom keybindings

(global-set-key (kbd "<home>") 'beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line)
(global-set-key (kbd "<del>") 'delete-char)
(global-set-key (kbd "C-m") 'newline-and-indent)
(global-set-key (kbd "M-g") 'goto-line)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
;;(global-set-key (kbd "M-#") 'dabbrev-expand)
(global-set-key (kbd "M-#") 'hippie-expand)
(global-set-key (kbd "C-x C-x") 'other-window)
(global-set-key (kbd "C-x C-o") 'exchange-point-and-mark)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-x m") '(lambda ()
                                 (interactive)
                                 (if (buffer-exists "*ansi-term*")
                                     (switch-to-buffer-other-window "*ansi-term*")
                                   (ansi-term (getenv "SHELL")))))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x y") 'bury-buffer)
(global-set-key (kbd "C-o")             ; Works like O in vi
                '(lambda ()
                   (interactive)
                   (beginning-of-line)
                   (open-line 1)
                   (indent-according-to-mode)))

(global-set-key (kbd "C-x C-j")
                '(lambda ()
                   (interactive)
                   (join-line 1)))

(global-set-key (kbd "C-x t")
                '(lambda ()
                   (interactive)
                   (find-file *todo-file*)))

(provide 'keybindings)


(setq-default fill-column 78)
;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))
