
(defvar *todo-file* "~/.emacs.d/todo.org")



(defun buffer-exists (bufname)
  (some #'(lambda (b) (string-equal (buffer-name b) bufname))
        (buffer-list)))





(require 'color-theme)
(color-theme-initialize)
(require 'color-theme-tangotango)
(color-theme-tangotango)

;; Disable some GUI features
(when (featurep 'tool-bar) (tool-bar-mode -1))
(when (featurep 'tooltip) (tooltip-mode -1))
;; (when (featurep 'menu-bar) (menu-bar-mode -1))
(blink-cursor-mode -1)


(require 'cl)




(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(windmove-default-keybindings)

;; Ido mode
(require 'tramp)
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq confirm-nonexistent-file-or-buffer nil
      ido-create-new-buffer 'always
      ido-enable-prefix nil
      ido-enable-flex-matching nil)


;; Uniquify
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)


;; Breadcrumb
(require 'breadcrumb)
(setq bc-bookmark-file nil)
(global-set-key [(control f2)]          'bc-set)
(global-set-key [(f2)]                  'bc-previous)
(global-set-key [(shift f2)]            'bc-next)
(global-set-key [(meta f2)]             'bc-list)


;; Hippie expand
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name)
      hippie-expand-dabbrev-as-symbol t)

;; Hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Transient mark mode
(transient-mark-mode 1)
(delete-selection-mode 1)


(require 'magit)




;; Kill ring browser, bind it to M-y
(require 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

;; Always answer 'y' or 'n'
(fset 'yes-or-no-p 'y-or-n-p)


;; iswitch-mode
;; (iswitchb-mode t)
;; (setq iswitchb-max-to-show 10
;;       iswitchb-delim " | "
;;       iswitchb-prompt-newbuffer nil
;;       iswitchb-case t)

;; Open compressed files transparently
(auto-compression-mode t)

;; Save backup files in ~/tmp/
(add-to-list 'backup-directory-alist '(".*" . "~/tmp"))

;; Get rid of recovery files (#file#)
(add-hook 'kill-emacs-hook
          '(lambda ()
             (mapcar (lambda (buf)
                       (with-current-buffer buf
                         (delete-auto-save-file-if-necessary t)))
                     (buffer-list))))



;; text-mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)


;; Python
(add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(autoload 'python-mode "python-mode" "Python mode" t)


;; Haskell
(load "~/.emacs.d/haskell-mode-2.6.1/haskell-site-file.el")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)


;; C
(setq c-default-style "k&r")
(setq-default c-basic-offset 4)
(add-hook 'c-mode-hook
          '(lambda ()
             (subword-mode)))


;; Perl
(require 'cperl-mode)
(defalias 'perl-mode 'cperl-mode)
(add-to-list 'auto-mode-alist '("\\.p[lm]$" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.t$" . cperl-mode))
(setq cperl-close-paren-offset -4
      cperl-continued-statement-offset 4
      cperl-indent-level 4
      cperl-indent-parens-as-block t
      cperl-tab-always-indent t
      cperl-label-offset 0)



;; Scala
(require 'scala-mode-auto)
(require 'scala-mode)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(defun scala-newline-and-indent ()
  (interactive)
  (scala-newline)
  (scala-indent-line))
(define-key scala-mode-map (kbd "RET") 'scala-newline-and-indent)


;; OCaml
(require 'tuareg)
(add-to-list 'auto-mode-alist '("\\.mli?$" . tuareg-mode))


;; PHP
(require 'php-mode)
(add-to-list 'auto-mode-alist '("\\.php[345]?$" . php-mode))

;; Twitter
(require 'twit)

;; org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(setq org-log-done t)
(setq org-startup-indented t)
(setq org-startup-folded nil)
(setq org-agenda-files (list "~/.emacs.d/todo.org"))



;; Django
(require 'django-html-mode)


;; Go
(require 'go-mode)
(add-to-list 'auto-mode-alist '("\\.go$" . go-mode))


;; Lua
(require 'lua-mode)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))


